{"ast":null,"code":"var _jsxFileName = \"/Users/donggunlee/Desktop/CloneBuilder/URP/client/src/Component/Chat/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Chat.css';\nimport { ChatBubble } from './chatbubble';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Chat = props => {\n  _s();\n  const [chatlog, setChatlog] = useState(props.chatData);\n  //const [feedback, setFeedback] = useState(\"\");\n  const [triggerResponse, setTriggerResponse] = useState(false);\n  const handleFeedbackChange = event => {\n    setFeedback(event.target.value);\n  };\n\n  //clickConfidence 함수\n\n  const giveFeedback = () => {\n    if (feedback !== \"\") {\n      setChatlog([...chatlog, {\n        \"speaker\": \"instructor\",\n        \"content\": feedback\n      }]);\n      setTriggerResponse(true);\n    }\n  };\n  useEffect(() => {\n    async function fetchData() {\n      if (triggerResponse) {\n        await props.getResponse(feedback);\n        setTriggerResponse(false); // Reset trigger\n        setFeedback(\"\");\n      }\n    }\n    fetchData();\n  }, [triggerResponse]);\n  useEffect(() => {\n    setChatlog(props.chatData);\n  }, [props.chatData]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatUI\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatWindow\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatContainer\",\n          children: chatlog.map((chat, index) => /*#__PURE__*/_jsxDEV(ChatBubble, {\n            speaker: chat.speaker,\n            cloneName: props.cloneName,\n            content: chat.content\n            //clickConfidence = {}\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), props.names, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottombar\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: feedback,\n          onChange: handleFeedbackChange,\n          placeholder: \"chat with your clone.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"chatBtn\",\n          onClick: giveFeedback\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(Chat, \"mpyaMVEcS5T8BKD7VWIMtsX51aA=\");\n_c = Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","ChatBubble","jsxDEV","_jsxDEV","Fragment","_Fragment","Chat","props","_s","chatlog","setChatlog","chatData","triggerResponse","setTriggerResponse","handleFeedbackChange","event","setFeedback","target","value","giveFeedback","feedback","fetchData","getResponse","children","className","map","chat","index","speaker","cloneName","content","fileName","_jsxFileName","lineNumber","columnNumber","names","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/donggunlee/Desktop/CloneBuilder/URP/client/src/Component/Chat/Chat.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './Chat.css';\nimport { ChatBubble } from './chatbubble';\n\n\nexport const Chat = (props) => {\n\n    const [chatlog, setChatlog] = useState(props.chatData);\n    //const [feedback, setFeedback] = useState(\"\");\n    const [triggerResponse, setTriggerResponse] = useState(false);\n\n    const handleFeedbackChange = (event) => {\n        setFeedback(event.target.value);\n    };\n\n\n    //clickConfidence 함수\n\n\n    const giveFeedback = () => {\n        if(feedback !== \"\") {\n            setChatlog([...chatlog, {\"speaker\":\"instructor\", \"content\": feedback}]);\n            setTriggerResponse(true);\n        }\n    }\n\n    useEffect(() => {\n        async function fetchData() {\n            if (triggerResponse) {\n                await props.getResponse(feedback);\n                setTriggerResponse(false); // Reset trigger\n                setFeedback(\"\");\n            }\n        }\n        fetchData();\n    }, [triggerResponse]);\n\n    useEffect(() => {\n        setChatlog(props.chatData);\n    }, [props.chatData]);\n\n\n    return(\n        <>\n            <div className='chatUI'>\n                <div className='chatWindow'>\n                    <div className='chatContainer'>\n                        {chatlog.map((chat, index) => (\n                            <ChatBubble\n                                key = {index}\n                                speaker = {chat.speaker}\n                                cloneName={props.cloneName} \n                                content = {chat.content}\n                                //clickConfidence = {}\n\n\n                            />\n                        ))}\n                    </div>\n                </div>\n                {props.names}\n                <div className='bottombar'>\n                    <input value={feedback} onChange={handleFeedbackChange} placeholder='chat with your clone.'/>\n                    <button className='chatBtn' onClick={giveFeedback}/>\n                </div>\n            </div>\n        </>\n    )\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}