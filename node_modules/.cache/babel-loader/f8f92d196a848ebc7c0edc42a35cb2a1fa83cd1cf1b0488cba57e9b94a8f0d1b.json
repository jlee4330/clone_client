{"ast":null,"code":"var _jsxFileName = \"/Users/donggunlee/Desktop/CloneBuilder/URP/client/src/Component/Chat/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Chat.css';\nimport { ChatBubble } from './chatbubble';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Chat = props => {\n  _s();\n  const [chatlog, setChatlog] = useState(props.chatData);\n  const [feedback, setFeedback] = useState(\"\");\n  const [triggerResponse, setTriggerResponse] = useState(false);\n  const chatEndRef = useRef(null);\n  const {\n    className\n  } = props;\n  const handleFeedbackChange = event => {\n    setFeedback(event.target.value);\n  };\n  const giveFeedback = () => {\n    if (feedback !== \"\") {\n      const newChatlog = [...chatlog, {\n        \"speaker\": \"user\",\n        \"content\": feedback,\n        \"class\": \"clonechat\"\n      }];\n      setChatlog(newChatlog);\n      setTriggerResponse(true);\n    }\n  };\n  const handleKeyPress = event => {\n    if (event.key === 'Enter') {\n      giveFeedback();\n    }\n  };\n  useEffect(() => {\n    async function fetchData() {\n      if (triggerResponse) {\n        const response = await props.getResponse(feedback);\n        const newChatlog = [...chatlog, {\n          \"speaker\": \"digital clone\",\n          \"content\": response,\n          \"class\": \"clonechat\"\n        }];\n        setChatlog(newChatlog);\n        setTriggerResponse(false); // Reset trigger\n        setFeedback(\"\");\n      }\n    }\n    fetchData();\n  }, [triggerResponse]);\n  useEffect(() => {\n    setChatlog(props.chatData);\n  }, [props.chatData]);\n  useEffect(() => {\n    if (chatEndRef.current) {\n      chatEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [chatlog]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chatUI`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatWindow\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chatContainer ${className}`,\n          children: [chatlog.map((chat, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            id: `chatBubble-${index}`,\n            className: `chatBubble ${chat.class || ''}`,\n            children: /*#__PURE__*/_jsxDEV(ChatBubble, {\n              logId: chat.logId // logId가 올바르게 설정되어 있는지 확인\n              ,\n              speaker: chat.speaker,\n              cloneName: props.cloneName,\n              content: chat.content,\n              image: props.profileImageUrl,\n              updateLog: props.updateLog\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 33\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 29\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: chatEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), props.names, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottombar\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: feedback,\n          onChange: handleFeedbackChange,\n          onKeyPress: handleKeyPress,\n          placeholder: \"chat with your clone.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"chatBtn\",\n          onClick: giveFeedback\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(Chat, \"G1qU0I84AHPPsD1pIiJkoNqp3qU=\");\n_c = Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ChatBubble","jsxDEV","_jsxDEV","Fragment","_Fragment","Chat","props","_s","chatlog","setChatlog","chatData","feedback","setFeedback","triggerResponse","setTriggerResponse","chatEndRef","className","handleFeedbackChange","event","target","value","giveFeedback","newChatlog","handleKeyPress","key","fetchData","response","getResponse","current","scrollIntoView","behavior","children","map","chat","index","id","class","logId","speaker","cloneName","content","image","profileImageUrl","updateLog","fileName","_jsxFileName","lineNumber","columnNumber","ref","names","onChange","onKeyPress","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/donggunlee/Desktop/CloneBuilder/URP/client/src/Component/Chat/Chat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './Chat.css';\nimport { ChatBubble } from './chatbubble';\n\nexport const Chat = (props) => {\n    const [chatlog, setChatlog] = useState(props.chatData);\n    const [feedback, setFeedback] = useState(\"\");\n    const [triggerResponse, setTriggerResponse] = useState(false);\n    const chatEndRef = useRef(null);\n    const { className } = props;\n\n    const handleFeedbackChange = (event) => {\n        setFeedback(event.target.value);\n    };\n\n    const giveFeedback = () => {\n        if (feedback !== \"\") {\n            const newChatlog = [...chatlog, { \"speaker\": \"user\", \"content\": feedback, \"class\": \"clonechat\" }];\n            setChatlog(newChatlog);\n            setTriggerResponse(true);\n        }\n    }\n\n    const handleKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            giveFeedback();\n        }\n    }\n\n    useEffect(() => {\n        async function fetchData() {\n            if (triggerResponse) {\n                const response = await props.getResponse(feedback);\n                const newChatlog = [...chatlog, { \"speaker\": \"digital clone\", \"content\": response, \"class\": \"clonechat\" }];\n                setChatlog(newChatlog);\n                setTriggerResponse(false); // Reset trigger\n                setFeedback(\"\");\n            }\n        }\n        fetchData();\n    }, [triggerResponse]);\n\n    useEffect(() => {\n        setChatlog(props.chatData);\n    }, [props.chatData]);\n\n    useEffect(() => {\n        if (chatEndRef.current) {\n            chatEndRef.current.scrollIntoView({ behavior: 'smooth' });\n        }\n    }, [chatlog]);\n\n    return (\n        <>\n            <div className={`chatUI`}>\n                <div className='chatWindow'>\n                    <div className={`chatContainer ${className}`}>\n                        {chatlog.map((chat, index) => (\n                            <div key={index} id={`chatBubble-${index}`} className={`chatBubble ${chat.class || ''}`}>\n                                <ChatBubble\n                                    logId={chat.logId}  // logId가 올바르게 설정되어 있는지 확인\n                                    speaker={chat.speaker}\n                                    cloneName={props.cloneName}\n                                    content={chat.content}\n                                    image={props.profileImageUrl}\n                                    updateLog={props.updateLog}\n                                />\n                            </div>\n                        ))}\n                        <div ref={chatEndRef} />\n                    </div>\n                </div>\n                {props.names}\n                <div className='bottombar'>\n                    <input value={feedback} onChange={handleFeedbackChange} onKeyPress={handleKeyPress} placeholder='chat with your clone.' />\n                    <button className='chatBtn' onClick={giveFeedback} />\n                </div>\n            </div>\n        </>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}